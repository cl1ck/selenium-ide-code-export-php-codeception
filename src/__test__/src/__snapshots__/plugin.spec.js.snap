// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Code Export JavaScript Mocha should export a suite 1`] = `
"// Generated by Selenium IDE
<?php

/** phpcs:ignoreFile */

declare(strict_types=1);

namespace App\\\\Tests\\\\acceptance;

use App\\\\Tests\\\\AcceptanceTester;
use Codeception\\\\Util\\\\Fixtures;
use Facebook\\\\WebDriver\\\\Remote\\\\RemoteWebDriver;
use Facebook\\\\WebDriver\\\\WebDriverKeys;
use Facebook\\\\WebDriver\\\\WebDriverExpectedCondition;
use Facebook\\\\WebDriver\\\\WebDriverBy;

class LoginCest {
    private array $vars = [];
    
    public function _before() {
    }
    public function _after() {
    }
    
    public function testValidcredentials(AcceptanceTester $i) {
        $i->amOnUrl('undefined/login');
        $i->resizeWindow(1440, 1177);
        $i->pressKey(WebDriverBy::id('username'), 'tomsmith');
        $i->pressKey(WebDriverBy::id('password'), 'SuperSecretPassword!');
        $i->click(WebDriverBy::cssSelector('#login button'));
        $i->see(You logged into a secure area!\\\\\\\\\\\\\\\\n×, WebDriverBy::cssSelector('.flash.success'));
    }
    
    public function testInvalidcredentials(AcceptanceTester $i) {
        $i->amOnUrl('undefined/login');
        $i->resizeWindow(1440, 1177);
        $i->pressKey(WebDriverBy::id('username'), 'blah');
        $i->pressKey(WebDriverBy::id('password'), 'blah');
        $i->click(WebDriverBy::cssSelector('#login button'));
        $i->see(Your username is invalid!\\\\\\\\\\\\\\\\n×, WebDriverBy::id('flash'));
    }
}
"
`;

exports[`Code Export JavaScript Mocha should export a suite that uses control flow commands 1`] = `
"// Generated by Selenium IDE
<?php

/** phpcs:ignoreFile */

declare(strict_types=1);

namespace App\\\\Tests\\\\acceptance;

use App\\\\Tests\\\\AcceptanceTester;
use Codeception\\\\Util\\\\Fixtures;
use Facebook\\\\WebDriver\\\\Remote\\\\RemoteWebDriver;
use Facebook\\\\WebDriver\\\\WebDriverKeys;
use Facebook\\\\WebDriver\\\\WebDriverExpectedCondition;
use Facebook\\\\WebDriver\\\\WebDriverBy;

class ControlflowCest {
    private array $vars = [];
    
    public function _before() {
    }
    public function _after() {
    }
    
    public function testControlflowif(AcceptanceTester $i) {
        $this->vars['myVar'] = $i->executeJS('return \\\\'a\\\\'');;
        if (!![object Promise]) {
            $this->vars['output'] = $i->executeJS('return \\\\'a\\\\'');;
        } elseif (!![object Promise]) {
            $this->vars['output'] = $i->executeJS('return \\\\'b\\\\'');;
        } else {
            $this->vars['output'] = $i->executeJS('return \\\\'c\\\\'');;
        }
        $i->assertEquals($this->vars['output'], 'a');
    }
    
    public function testControlflowelseif(AcceptanceTester $i) {
        $this->vars['myVar'] = $i->executeJS('return \\\\'b\\\\'');;
        if (!![object Promise]) {
            $this->vars['output'] = $i->executeJS('return \\\\'a\\\\'');;
        } elseif (!![object Promise]) {
            $this->vars['output'] = $i->executeJS('return \\\\'b\\\\'');;
        } else {
            $this->vars['output'] = $i->executeJS('return \\\\'c\\\\'');;
        }
        $i->assertEquals($this->vars['output'], 'b');
    }
    
    public function testControlflowelse(AcceptanceTester $i) {
        $this->vars['myVar'] = $i->executeJS('return \\\\'c\\\\'');;
        if (!![object Promise]) {
            $this->vars['output'] = $i->executeJS('return \\\\'a\\\\'');;
        } elseif (!![object Promise]) {
            $this->vars['output'] = $i->executeJS('return \\\\'b\\\\'');;
        } else {
            $this->vars['output'] = $i->executeJS('return \\\\'c\\\\'');;
        }
        $i->assertEquals($this->vars['output'], 'c');
    }
    
    public function testControlflowdo(AcceptanceTester $i) {
        $this->vars['check'] = $i->executeJS('return 1');;
        do {
            $this->vars['check'] = $i->executeJS('return arguments[0] + 1', [$this->vars['check']]);;
        } while (!![object Promise]);
        $i->assertEquals($this->vars['check'], '3');
    }
    
    public function testControlflowtimes(AcceptanceTester $i) {
        $this->vars['check'] = $i->executeJS('return 1');;
        $times = 2;
        for ($c = 0; $c < $times; $c++) {
            $this->vars['check'] = $i->executeJS('return arguments[0] + 1', [$this->vars['check']]);;
        }
        $i->assertEquals($this->vars['check'], '3');
    }
    
    public function testControlflowwhile(AcceptanceTester $i) {
        $this->vars['check'] = $i->executeJS('return 1');;
        while (!![object Promise]) {
            $this->vars['check'] = $i->executeJS('return arguments[0] + 1', [$this->vars['check']]);;
        }
        $i->assertEquals($this->vars['check'], '3');
    }
}
"
`;

exports[`Code Export JavaScript Mocha should export a suite with a reused test method 1`] = `
"// Generated by Selenium IDE
<?php

/** phpcs:ignoreFile */

declare(strict_types=1);

namespace App\\\\Tests\\\\acceptance;

use App\\\\Tests\\\\AcceptanceTester;
use Codeception\\\\Util\\\\Fixtures;
use Facebook\\\\WebDriver\\\\Remote\\\\RemoteWebDriver;
use Facebook\\\\WebDriver\\\\WebDriverKeys;
use Facebook\\\\WebDriver\\\\WebDriverExpectedCondition;
use Facebook\\\\WebDriver\\\\WebDriverBy;

class LoginCest {
    private array $vars = [];
    
    public function _before() {
    }
    public function _after() {
    }
    
    public function login() {
        $i->amOnUrl('undefined/');
        $i->click(WebDriverBy::linkText('Form Authentication'));
        $i->pressKey(WebDriverBy::id('username'), $this->vars['username']);
        $i->pressKey(WebDriverBy::id('password'), $this->vars['password']);
        $i->click(WebDriverBy::cssSelector('.fa'));
    }
    
    public function testInvalidcredentials(AcceptanceTester $i) {
        $this->vars['username'] = 'blah';
        $this->vars['password'] = 'blah';
        login();
    }
    
    public function testValidcredentials(AcceptanceTester $i) {
        $this->vars['username'] = 'tomsmith';
        $this->vars['password'] = 'SuperSecretPassword!';
        login();
    }
}
"
`;

exports[`Code Export JavaScript Mocha should export a suite with commands that open a new window inside of a reused test method 1`] = `
"// Generated by Selenium IDE
<?php

/** phpcs:ignoreFile */

declare(strict_types=1);

namespace App\\\\Tests\\\\acceptance;

use App\\\\Tests\\\\AcceptanceTester;
use Codeception\\\\Util\\\\Fixtures;
use Facebook\\\\WebDriver\\\\Remote\\\\RemoteWebDriver;
use Facebook\\\\WebDriver\\\\WebDriverKeys;
use Facebook\\\\WebDriver\\\\WebDriverExpectedCondition;
use Facebook\\\\WebDriver\\\\WebDriverBy;

class DefaultSuiteCest {
    private array $vars = [];
    
    public function _before() {
    }
    public function _after() {
    }
    public function waitForWindow(AcceptanceTester $i, $timeout = 2) {
        usleep($timeout);
        $handlesThen = $this->vars['windowHandles'];
        $handlesNow = null;
        $i->executeInSelenium(function (RemoteWebDriver $driver) use (&$handlesNow) {
            $handlesNow = $driver->getWindowHandles();
        });
        if (count($handlesNow) > count($handlesThen)) {
            return array_diff($handlesNow, $handlesThen)[0]
        }
        throw new RuntimeException('New window did not appear before timeout');
    }
    
    
    public function selectwindow() {
        $i->amOnUrl('undefined/windows');
        [object Object]
        $i->switchToWindow($this->vars['win9425']);
        $i->seeInTitle('New Window');
    }
    
    public function testReuse(AcceptanceTester $i) {
        selectwindow();
    }
}
"
`;

exports[`Code Export JavaScript Mocha should export a suite with just one new window util method when there are multiple commands that open a new window 1`] = `
"// Generated by Selenium IDE
<?php

/** phpcs:ignoreFile */

declare(strict_types=1);

namespace App\\\\Tests\\\\acceptance;

use App\\\\Tests\\\\AcceptanceTester;
use Codeception\\\\Util\\\\Fixtures;
use Facebook\\\\WebDriver\\\\Remote\\\\RemoteWebDriver;
use Facebook\\\\WebDriver\\\\WebDriverKeys;
use Facebook\\\\WebDriver\\\\WebDriverExpectedCondition;
use Facebook\\\\WebDriver\\\\WebDriverBy;

class DefaultSuiteCest {
    private array $vars = [];
    
    public function _before() {
    }
    public function _after() {
    }
    public function waitForWindow(AcceptanceTester $i, $timeout = 2) {
        usleep($timeout);
        $handlesThen = $this->vars['windowHandles'];
        $handlesNow = null;
        $i->executeInSelenium(function (RemoteWebDriver $driver) use (&$handlesNow) {
            $handlesNow = $driver->getWindowHandles();
        });
        if (count($handlesNow) > count($handlesThen)) {
            return array_diff($handlesNow, $handlesThen)[0]
        }
        throw new RuntimeException('New window did not appear before timeout');
    }
    
    
    public function selectwindow() {
        $i->amOnUrl('undefined/windows');
        [object Object]
        $i->switchToWindow($this->vars['win9425']);
        $i->seeInTitle('New Window');
    }
    
    public function testReuse(AcceptanceTester $i) {
        selectwindow();
    }
    
    public function testSelectwindow(AcceptanceTester $i) {
        $i->amOnUrl('undefined/windows');
        $i->executeInSelenium(function (RemoteWebDriver $driver) {
            $this->vars['windowHandles'] = 'windowHandles';
        });
        [object Promise]
        $this->vars['win9425'] = 'win9425';
        $i->switchToWindow($this->vars['win9425']);
        $i->seeInTitle('New Window');
    }
}
"
`;

exports[`Code Export JavaScript Mocha should export a test 1`] = `
"// Generated by Selenium IDE
<?php

/** phpcs:ignoreFile */

declare(strict_types=1);

namespace App\\\\Tests\\\\acceptance;

use App\\\\Tests\\\\AcceptanceTester;
use Codeception\\\\Util\\\\Fixtures;
use Facebook\\\\WebDriver\\\\Remote\\\\RemoteWebDriver;
use Facebook\\\\WebDriver\\\\WebDriverKeys;
use Facebook\\\\WebDriver\\\\WebDriverExpectedCondition;
use Facebook\\\\WebDriver\\\\WebDriverBy;

class LoginCest {
    private array $vars = [];
    
    public function _before() {
    }
    public function _after() {
    }
    
    public function testLogin(AcceptanceTester $i) {
        $i->amOnUrl('undefined/login');
        $i->resizeWindow(1440, 1177);
        $i->pressKey(WebDriverBy::id('username'), 'tomsmith');
        $i->pressKey(WebDriverBy::id('password'), 'SuperSecretPassword!');
        $i->click(WebDriverBy::cssSelector('#login button'));
        $i->see(You logged into a secure area!\\\\\\\\\\\\\\\\n×, WebDriverBy::cssSelector('.flash.success'));
    }
}
"
`;

exports[`Code Export JavaScript Mocha should export a test with a reused test method 1`] = `
"// Generated by Selenium IDE
<?php

/** phpcs:ignoreFile */

declare(strict_types=1);

namespace App\\\\Tests\\\\acceptance;

use App\\\\Tests\\\\AcceptanceTester;
use Codeception\\\\Util\\\\Fixtures;
use Facebook\\\\WebDriver\\\\Remote\\\\RemoteWebDriver;
use Facebook\\\\WebDriver\\\\WebDriverKeys;
use Facebook\\\\WebDriver\\\\WebDriverExpectedCondition;
use Facebook\\\\WebDriver\\\\WebDriverBy;

class ValidcredentialsCest {
    private array $vars = [];
    
    public function _before() {
    }
    public function _after() {
    }
    
    public function login() {
        $i->amOnUrl('undefined/');
        $i->click(WebDriverBy::linkText('Form Authentication'));
        $i->pressKey(WebDriverBy::id('username'), $this->vars['username']);
        $i->pressKey(WebDriverBy::id('password'), $this->vars['password']);
        $i->click(WebDriverBy::cssSelector('.fa'));
    }
    
    public function testValidcredentials(AcceptanceTester $i) {
        $this->vars['username'] = 'tomsmith';
        $this->vars['password'] = 'SuperSecretPassword!';
        login();
    }
}
"
`;

exports[`Code Export JavaScript Mocha should export a test with commands that open a new window 1`] = `
"// Generated by Selenium IDE
<?php

/** phpcs:ignoreFile */

declare(strict_types=1);

namespace App\\\\Tests\\\\acceptance;

use App\\\\Tests\\\\AcceptanceTester;
use Codeception\\\\Util\\\\Fixtures;
use Facebook\\\\WebDriver\\\\Remote\\\\RemoteWebDriver;
use Facebook\\\\WebDriver\\\\WebDriverKeys;
use Facebook\\\\WebDriver\\\\WebDriverExpectedCondition;
use Facebook\\\\WebDriver\\\\WebDriverBy;

class SelectwindowCest {
    private array $vars = [];
    
    public function _before() {
    }
    public function _after() {
    }
    public function waitForWindow(AcceptanceTester $i, $timeout = 2) {
        usleep($timeout);
        $handlesThen = $this->vars['windowHandles'];
        $handlesNow = null;
        $i->executeInSelenium(function (RemoteWebDriver $driver) use (&$handlesNow) {
            $handlesNow = $driver->getWindowHandles();
        });
        if (count($handlesNow) > count($handlesThen)) {
            return array_diff($handlesNow, $handlesThen)[0]
        }
        throw new RuntimeException('New window did not appear before timeout');
    }
    
    
    public function testSelectwindow(AcceptanceTester $i) {
        $i->amOnUrl('undefined/');
        $i->resizeWindow(1260, 1027);
        $i->click(WebDriverBy::linkText('Multiple Windows'));
        $i->executeInSelenium(function (RemoteWebDriver $driver) {
            $this->vars['windowHandles'] = 'windowHandles';
        });
        [object Promise]
        $this->vars['win9625'] = 'win9625';
        $handle = null;
        $i->executeInSelenium(function (RemoteWebDriver $driver) use (&$handle) {
            $handle = $driver->getWindowHandle();
        });
        $this->vars['root'] = $handle;
        $i->switchToWindow($this->vars['win9625']);
        $i->seeInTitle('New Window');
        $i->switchToWindow($this->vars['root']);
        $i->seeInTitle('The Internet');
    }
}
"
`;

exports[`Code Export JavaScript Mocha should export a test with grid execution 1`] = `
"// Generated by Selenium IDE
<?php

/** phpcs:ignoreFile */

declare(strict_types=1);

namespace App\\\\Tests\\\\acceptance;

use App\\\\Tests\\\\AcceptanceTester;
use Codeception\\\\Util\\\\Fixtures;
use Facebook\\\\WebDriver\\\\Remote\\\\RemoteWebDriver;
use Facebook\\\\WebDriver\\\\WebDriverKeys;
use Facebook\\\\WebDriver\\\\WebDriverExpectedCondition;
use Facebook\\\\WebDriver\\\\WebDriverBy;

class LoginCest {
    private array $vars = [];
    
    public function _before() {
    }
    public function _after() {
    }
    
    public function testLogin(AcceptanceTester $i) {
        $i->amOnUrl('undefined/login');
        $i->resizeWindow(1440, 1177);
        $i->pressKey(WebDriverBy::id('username'), 'tomsmith');
        $i->pressKey(WebDriverBy::id('password'), 'SuperSecretPassword!');
        $i->click(WebDriverBy::cssSelector('#login button'));
        $i->see(You logged into a secure area!\\\\\\\\\\\\\\\\n×, WebDriverBy::cssSelector('.flash.success'));
    }
}
"
`;
